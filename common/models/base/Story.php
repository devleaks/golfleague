<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use common\behaviors\MediaBehavior;

use Yii;
use yii\db\ActiveRecord;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "story".
 *
 * @property integer $id
 * @property integer $parent_id
 * @property string $story_type
 * @property string $title
 * @property string $header
 * @property string $body
 * @property integer $presentation_id
 * @property integer $animation_id
 * @property string $animation_parameters
 * @property string $animation_data
 * @property string $status
 * @property string $created_at
 * @property string $updated_at
 * @property integer $updated_by
 * @property integer $created_by
 *
 * @property \common\models\Story $parent
 * @property \common\models\Story[] $stories
 * @property \common\models\Presentation $presentation
 * @property \common\models\Animation $animation
 * @property string $aliasModel
 */
abstract class Story extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const STORY_TYPE_STORY = 'STORY';
    const STORY_TYPE_PAGE = 'PAGE';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'story';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
                'timestamp' => [
                        'class' => TimestampBehavior::className(),
                        'attributes' => [
                                ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                                ActiveRecord::EVENT_BEFORE_UPDATE => 'updated_at',
                        ],
                        'value' => function() { return date('Y-m-d H:i:s'); /* mysql datetime format is ‘AAAA-MM-JJ HH:MM:SS’*/},
                ],
				'uploadFile' => [
	                'class' => MediaBehavior::className(),
	                'mediasAttributes' => ['media']
	            ]
        ];
    }

    /**
     * Alias name of table for crud viewsLists all Area models.
     * Change the alias name manual if needed later
     * @return string
     */
    public function getAliasModel($plural=false)
    {
        if($plural){
            return Yii::t('golf', 'Stories');
        }else{
            return Yii::t('golf', 'Story');
        }
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['parent_id', 'presentation_id', 'animation_id', 'updated_by', 'created_by'], 'integer'],
            [['story_type', 'body', 'animation_parameters', 'animation_data'], 'string'],
            [['title', 'header'], 'required'],
            [['created_at', 'updated_at'], 'safe'],
            [['title'], 'string', 'max' => 160],
            [['header'], 'string', 'max' => 400],
            [['status'], 'string', 'max' => 40],
            [['parent_id'], 'exist', 'skipOnError' => true, 'targetClass' => Story::className(), 'targetAttribute' => ['parent_id' => 'id']],
            [['presentation_id'], 'exist', 'skipOnError' => true, 'targetClass' => Presentation::className(), 'targetAttribute' => ['presentation_id' => 'id']],
            [['animation_id'], 'exist', 'skipOnError' => true, 'targetClass' => Animation::className(), 'targetAttribute' => ['animation_id' => 'id']],
            ['story_type', 'in', 'range' => [
                    self::STORY_TYPE_STORY,
                    self::STORY_TYPE_PAGE,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('golf', 'ID'),
            'parent_id' => Yii::t('golf', 'Parent ID'),
            'story_type' => Yii::t('golf', 'Story Type'),
            'title' => Yii::t('golf', 'Title'),
            'header' => Yii::t('golf', 'Header'),
            'body' => Yii::t('golf', 'Body'),
            'presentation_id' => Yii::t('golf', 'Presentation ID'),
            'animation_id' => Yii::t('golf', 'Animation ID'),
            'animation_parameters' => Yii::t('golf', 'Animation Parameters'),
            'animation_data' => Yii::t('golf', 'Animation Data'),
            'status' => Yii::t('golf', 'Status'),
            'created_at' => Yii::t('golf', 'Created At'),
            'updated_at' => Yii::t('golf', 'Updated At'),
            'updated_by' => Yii::t('golf', 'Updated By'),
            'created_by' => Yii::t('golf', 'Created By'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParent()
    {
        return $this->hasOne(\common\models\Story::className(), ['id' => 'parent_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStories()
    {
        return $this->hasMany(\common\models\Story::className(), ['parent_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPresentation()
    {
        return $this->hasOne(\common\models\Presentation::className(), ['id' => 'presentation_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAnimation()
    {
        return $this->hasOne(\common\models\Animation::className(), ['id' => 'animation_id']);
    }




    /**
     * get column story_type enum value label
     * @param string $value
     * @return string
     */
    public static function getStoryTypeValueLabel($value){
        $labels = self::optsStoryType();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column story_type ENUM value labels
     * @return array
     */
    public static function optsStoryType()
    {
        return [
            self::STORY_TYPE_STORY => Yii::t('golf', self::STORY_TYPE_STORY),
            self::STORY_TYPE_PAGE => Yii::t('golf', self::STORY_TYPE_PAGE),
        ];
    }

}
